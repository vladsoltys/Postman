{
	"info": {
		"_postman_id": "da2da5a0-65ae-4aac-a9e6-d1d7f768f6e9",
		"name": "Homework Postman 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test ( \"Status code is 200\" , function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test (\"Checkout string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include\r",
							"    (\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let JsonData = pm.response.json();\r",
							"// console.log(JsonData);\r",
							"\r",
							"let JsonAge = parseInt(JsonData.age);\r",
							"let JsonName = JsonData.name\r",
							"let JsonSalary = JsonData.salary\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Checkout name\", function () {\r",
							"    pm.expect(JsonName).to.eql(\"Potap\");\r",
							"});\r",
							"\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Checkout age\", function() {\r",
							"    pm.expect(JsonAge).to.eql(31);\r",
							"});\r",
							"\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Checkout salary\", function () {\r",
							"    pm.expect(JsonSalary).to.eql(800000);\r",
							"})\r",
							"\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var JsonDataRequest = request.data;\r",
							"//  console.log(JsonDataRequest);\r",
							"\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Request name = response name\", function () {\r",
							"    pm.expect(JsonName).to.eql(JsonDataRequest.name);\r",
							"});\r",
							"\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Request age = response age\", function () {\r",
							"    pm.expect(JsonAge).to.eql(parseInt(JsonDataRequest.age));\r",
							"});\r",
							"\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Request salary = response salary\", function () {\r",
							"    pm.expect(JsonSalary).to.eql(parseInt(JsonDataRequest.salary));\r",
							"});\r",
							"\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"let JsonFamily = JsonData.family;\r",
							"console.log(JsonFamily);\r",
							"\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let u_salary_1_5_year = JsonFamily.u_salary_1_5_year;\r",
							"// console.log(u_salary_1_5_year);\r",
							"pm.test(\"u_salary_1_5_year from response = salary*4\", function (){\r",
							"    pm.expect(u_salary_1_5_year).to.eql(parseInt(JsonDataRequest.salary)*4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Potap",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "800000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let responseJson = pm.response.json();\r",
							"// console.log(responseJson);\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let requestJson = pm.request.url.query.toObject();\r",
							"// console.log(requestJson);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"request name = response name\", function () {\r",
							"    pm.expect(responseJson.name).to.eql(requestJson.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"request age = response age\", function () {\r",
							"    pm.expect(parseInt(responseJson.age)).to.eql(parseInt(requestJson.age));\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"request salary = response salary\", function () {\r",
							"    pm.expect(responseJson.salary).to.eql(parseInt(requestJson.salary));\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let JsonFamily = responseJson.family;\r",
							"console.log(JsonFamily);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test (\"Checking dog include name\", function () {\r",
							"    pm.expect(JsonFamily.pets.dog.name).not.eql(undefined);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test (\"Checking dog include age\", function () {\r",
							"    pm.expect(JsonFamily.pets.dog.age).not.eql(undefined);\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test (\"Checking dog equal Luky\", function () {\r",
							"    pm.expect(JsonFamily.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test (\"Checking dog equal Luky\", function () {\r",
							"    pm.expect(JsonFamily.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Semen&age=34&salary=4000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Semen"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "4000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let requestJson = pm.request.url.query.toObject();\r",
							"// console.log(requestJson);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"request name = response name\", function () {\r",
							"    pm.expect(responseJson.name).to.eql(requestJson.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"request age = response age\", function () {\r",
							"    pm.expect(responseJson.age).to.eql(parseInt(requestJson.age));\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"let requestJsonSalary = requestJson.salary;\r",
							"console.log(requestJsonSalary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let responseJsonSalary = responseJson.salary;\r",
							"console.log(responseJsonSalary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"let responseJsonSalaryFirst = responseJson.salary[0];\r",
							"console.log(responseJsonSalaryFirst);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"let responseJsonSalarySecond = responseJson.salary[1];\r",
							"console.log(responseJsonSalarySecond);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let responseJsonSalaryThird = responseJson.salary[2];\r",
							"console.log(responseJsonSalaryThird);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"request salary = response first salary\", function () {\r",
							"    pm.expect(responseJsonSalaryFirst).to.eql(parseInt(requestJson.salary));\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"request salary*2 = response second salary\", function () {\r",
							"    pm.expect(parseInt(responseJsonSalarySecond)).to.eql(parseInt(requestJson.salary)*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"request salary*3 = response third salary\", function () {\r",
							"    pm.expect(parseInt(responseJsonSalaryThird)).to.eql(parseInt(requestJson.salary)*3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// Environments -> creating \"PostmanScriptsHM\" enviroment -> creating variable \"name\"\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"// creating variable \"age\"\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"// creating variable \"salary\"\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", requestJson.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", requestJson.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", requestJson.salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i < responseJsonSalary.length; i++) {\r",
							"  console.log(responseJsonSalary[i]);\r",
							"};\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Olga&age=25&salary=7000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Olga"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "7000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// salary = {{salary}}\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// age = {{age}}\r",
							"\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// name = {{name}}\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"// send\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let responseJson = pm.response.json();\r",
							"// console.log(responseJson);\r",
							"// let keys = Object.keys(responseJson);\r",
							"// console.log(keys);\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let requestJson = request.data;\r",
							"// console.log(requestJson);\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response include start_qa_salary\", function () {\r",
							"    pm.expect(Object.keys(responseJson)).to.include(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response include qa_salary_after_6_months\", function () {\r",
							"    pm.expect(Object.keys(responseJson)).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response include qa_salary_after_12_months\", function () {\r",
							"    pm.expect(Object.keys(responseJson)).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response include qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(Object.keys(responseJson)).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response include qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(Object.keys(responseJson)).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response include person\", function () {\r",
							"    pm.expect(Object.keys(responseJson)).to.include(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary = request salary\", function () {\r",
							"    pm.expect(responseJson.start_qa_salary).to.eql(parseInt(requestJson.salary));\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = request salary*2\", function () {\r",
							"    pm.expect(responseJson.qa_salary_after_6_months).to.eql(parseInt(requestJson.salary)*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = request salary*2.7\", function () {\r",
							"    pm.expect(responseJson.qa_salary_after_12_months).to.eql(parseInt(requestJson.salary)*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = request salary*3.3\", function () {\r",
							"    pm.expect(responseJson[\"qa_salary_after_1.5_year\"]).to.eql(parseInt(requestJson.salary)*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_year = request salary*3.8\", function () {\r",
							"    pm.expect(responseJson[\"qa_salary_after_3.5_years\"]).to.eql(parseInt(requestJson.salary)*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name[1] = request salary\", function () {\r",
							"    pm.expect(responseJson.person.u_name[1]).to.eql(parseInt(requestJson.salary));\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age = request age\", function () {\r",
							"    pm.expect(responseJson.person.u_age).to.eql(parseInt(requestJson.age));\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years = request salary*4.2\", function () {\r",
							"    pm.expect(responseJson.person.u_age).to.eql(parseInt(requestJson.age));\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let person = Object.keys(responseJson.person);\r",
							"// console.log(person);\r",
							"for(let i = 0; i < person.length; i++){\r",
							"    console.log(person[i]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}